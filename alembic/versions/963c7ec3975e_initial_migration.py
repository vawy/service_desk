"""initial migration

Revision ID: 963c7ec3975e
Revises: 
Create Date: 2024-12-20 16:12:35.846342

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from app.utils.jwt import get_password_hash

# revision identifiers, used by Alembic.
revision: str = '963c7ec3975e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('client',
    sa.Column('first_name', sa.VARCHAR(length=256), nullable=False),
    sa.Column('middle_name', sa.VARCHAR(length=256), nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=256), nullable=False),
    sa.Column('username', sa.VARCHAR(length=64), nullable=False),
    sa.Column('email', sa.VARCHAR(length=256), nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(length=512), nullable=False),
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_client_created_at'), 'client', ['created_at'], unique=False)
    op.create_index(op.f('ix_client_first_name'), 'client', ['first_name'], unique=False)
    op.create_index(op.f('ix_client_last_name'), 'client', ['last_name'], unique=False)
    op.create_index(op.f('ix_client_updated_at'), 'client', ['updated_at'], unique=False)
    op.create_table('customer',
    sa.Column('connected_user_id', sa.BIGINT(), nullable=False),
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['connected_user_id'], ['client.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('connected_user_id')
    )
    op.create_index(op.f('ix_customer_created_at'), 'customer', ['created_at'], unique=False)
    op.create_index(op.f('ix_customer_updated_at'), 'customer', ['updated_at'], unique=False)
    op.create_table('operator',
    sa.Column('connected_user_id', sa.BIGINT(), nullable=False),
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['connected_user_id'], ['client.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('connected_user_id')
    )
    op.create_index(op.f('ix_operator_created_at'), 'operator', ['created_at'], unique=False)
    op.create_index(op.f('ix_operator_updated_at'), 'operator', ['updated_at'], unique=False)
    op.create_table('ticket',
    sa.Column('status', sa.VARCHAR(), nullable=True),
    sa.Column('operator_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['operator_id'], ['operator.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ticket_created_at'), 'ticket', ['created_at'], unique=False)
    op.create_index(op.f('ix_ticket_customer_id'), 'ticket', ['customer_id'], unique=False)
    op.create_index(op.f('ix_ticket_operator_id'), 'ticket', ['operator_id'], unique=False)
    op.create_index(op.f('ix_ticket_status'), 'ticket', ['status'], unique=False)
    op.create_index(op.f('ix_ticket_updated_at'), 'ticket', ['updated_at'], unique=False)
    op.create_table('message',
    sa.Column('content', sa.TEXT(), nullable=True),
    sa.Column('sender_type', sa.VARCHAR(), nullable=False),
    sa.Column('root', sa.BOOLEAN(), server_default=sa.text('false'), nullable=False),
    sa.Column('ticket_id', sa.BIGINT(), nullable=False),
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['ticket_id'], ['ticket.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_message_created_at'), 'message', ['created_at'], unique=False)
    op.create_index(op.f('ix_message_root'), 'message', ['root'], unique=False)
    op.create_index(op.f('ix_message_ticket_id'), 'message', ['ticket_id'], unique=False)
    op.create_index(op.f('ix_message_updated_at'), 'message', ['updated_at'], unique=False)

    test_users = [
        {
            "first_name": "Fedor",
            "middle_name": None,
            "last_name": "Dostoyevski",
            "username": "dostoevski",
            "email": None,
            "password": "dostoevski321"
        },
        {
            "first_name": "León",
            "middle_name": None,
            "last_name": "Tolstói",
            "username": "tolstoi",
            "email": None,
            "password": "tolstoi333"
        },
        {
            "first_name": "Nikolái",
            "middle_name": None,
            "last_name": "Gógol",
            "username": "gogol",
            "email": None,
            "password": "gogol54321"},
        {
            "first_name": "Iván",
            "middle_name": "Sergeevich",
            "last_name": "Turguénev",
            "username": "turguenev",
            "email": None,
            "password": "turguenev111"},
        {
            "first_name": "Charles",
            "middle_name": None,
            "last_name": "Dickens",
            "username": "dickens", "email": None,
            "password": "dickens098"
        }
    ]

    connection = op.get_bind()

    for user in test_users[:2]:
        hashed_password = get_password_hash(user.get("password"))
        result = connection.execute(
            sa.text(
                """
                insert into client values (:first_name, :middle_name, :last_name, :username, :email, :hashed_password)
                returning id
                """
            )
            .bindparams(
                first_name=user.get("first_name"),
                middle_name=user.get("middle_name"),
                last_name=user.get("last_name"),
                username=user.get("username"),
                email=user.get("email"),
                hashed_password=hashed_password
            )
        )

        user_id = result.fetchone()[0]

        op.execute(
            sa.text("insert into operator (connected_user_id) values (:connected_user_id)")
            .bindparams(connected_user_id=user_id)
        )

    for user in test_users[2:]:
        hashed_password = get_password_hash(user.get("password"))
        result = connection.execute(
            sa.text(
                """
                insert into client values (:first_name, :middle_name, :last_name, :username, :email, :hashed_password)
                returning id
                """
            )
            .bindparams(
                first_name=user.get("first_name"),
                middle_name=user.get("middle_name"),
                last_name=user.get("last_name"),
                username=user.get("username"),
                email=user.get("email"),
                hashed_password=hashed_password
            )
        )

        user_id = result.fetchone()[0]

        op.execute(
            sa.text("insert into customer (connected_user_id) values (:connected_user_id)")
            .bindparams(connected_user_id=user_id)
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_message_updated_at'), table_name='message')
    op.drop_index(op.f('ix_message_ticket_id'), table_name='message')
    op.drop_index(op.f('ix_message_root'), table_name='message')
    op.drop_index(op.f('ix_message_created_at'), table_name='message')
    op.drop_table('message')
    op.drop_index(op.f('ix_ticket_updated_at'), table_name='ticket')
    op.drop_index(op.f('ix_ticket_status'), table_name='ticket')
    op.drop_index(op.f('ix_ticket_operator_id'), table_name='ticket')
    op.drop_index(op.f('ix_ticket_customer_id'), table_name='ticket')
    op.drop_index(op.f('ix_ticket_created_at'), table_name='ticket')
    op.drop_table('ticket')
    op.drop_index(op.f('ix_operator_updated_at'), table_name='operator')
    op.drop_index(op.f('ix_operator_created_at'), table_name='operator')
    op.drop_table('operator')
    op.drop_index(op.f('ix_customer_updated_at'), table_name='customer')
    op.drop_index(op.f('ix_customer_created_at'), table_name='customer')
    op.drop_table('customer')
    op.drop_index(op.f('ix_client_updated_at'), table_name='client')
    op.drop_index(op.f('ix_client_last_name'), table_name='client')
    op.drop_index(op.f('ix_client_first_name'), table_name='client')
    op.drop_index(op.f('ix_client_created_at'), table_name='client')
    op.drop_table('client')
    # ### end Alembic commands ###
